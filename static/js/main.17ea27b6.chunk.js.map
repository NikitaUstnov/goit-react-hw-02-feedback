{"version":3,"sources":["logo.svg","Feedback/FeedbackCounter.js","Feedback/TotalCount.js","Feedback/Message.jsx","Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackCounter","title","addRate","console","log","type","name","onClick","TotalCount","good","neutral","bad","total","procentage","Message","message","Feedback","state","positiveFeedback","notifications","countTotalSumOfRate","setState","prevState","countProcentageOfGoodRate","Math","round","addRateFeedback","event","target","Number","this","Component","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAAe,I,wCC2BAA,MAxBf,YAA8C,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAGhC,OAFAC,QAAQC,IAAI,yKAGV,gCACE,6BAAKH,IACL,wBAAQI,KAAK,SAASC,KAAK,OAAOC,QAASL,EAA3C,kBAGA,wBAAQG,KAAK,SAASC,KAAK,UAAUC,QAASL,EAA9C,qBAGA,wBAAQG,KAAK,SAASC,KAAK,MAAMC,QAASL,EAA1C,qBCUSM,MAtBf,YAAuE,IAAjDP,EAAgD,EAAhDA,MAAOQ,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WACtD,OACE,gCACE,6BAAKZ,IACL,uCAAUQ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,0DAA6BC,EAA7B,WCISC,MAZf,YAA+B,IAAZC,EAAW,EAAXA,QACjB,OACE,8BACE,4BAAIA,OCDJC,E,4MAKJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPC,MAAQ,E,EACRM,iBAAmB,E,EACnBC,eAAgB,E,EAEhBC,oBAAsB,WACpB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BV,MAAOU,EAAUb,KAAOa,EAAUZ,QAAUY,EAAUX,S,EAI1DY,0BAA4B,WAC1B,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAC1BJ,iBAAkBM,KAAKC,MAAOH,EAAUb,KAAOa,EAAUV,MAAS,U,EAItEc,gBAAkB,SAAAC,GAChB,EAAKN,UAAS,SAAAC,GAAc,IAAD,EACzB,OAAO,EAAP,iBACGK,EAAMC,OAAOtB,KAAOuB,OAAOP,EAAUK,EAAMC,OAAOtB,MAAQ,IAD7D,+BAEiB,GAFjB,KAKF,EAAKc,sBACL,EAAKG,6B,uDAIL,OACE,gCACE,cAAC,EAAD,CACEtB,MAAM,wBACNC,QAAS4B,KAAKJ,kBAEfI,KAAKb,MAAME,cACV,cAAC,EAAD,CACElB,MAAM,YACNQ,KAAMqB,KAAKb,MAAMR,KACjBC,QAASoB,KAAKb,MAAMP,QACpBC,IAAKmB,KAAKb,MAAMP,QAChBE,MAAOkB,KAAKb,MAAML,MAClBC,WAAYiB,KAAKb,MAAMC,mBAGzB,cAAC,EAAD,CAASH,QAASe,KAAKf,iB,GAtDVgB,aAAjBf,EACGgB,aAAe,CACpBjB,QAAS,qBA2DEC,QC1DAiB,MAJf,WACE,OAAO,cAAC,EAAD,KCOMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17ea27b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FeedbackCounter({ title, addRate }) {\r\n  console.log('функция вызывается при нажатии');\r\n  // const { good, neutral, bad } = options;\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <button type=\"button\" name=\"good\" onClick={addRate}>\r\n        Good\r\n      </button>\r\n      <button type=\"button\" name=\"neutral\" onClick={addRate}>\r\n        Neutral\r\n      </button>\r\n      <button type=\"button\" name=\"bad\" onClick={addRate}>\r\n        Bad\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackCounter.propTypes = {\r\n  addRate: PropTypes.func,\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default FeedbackCounter;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TotalCount({ title, good, neutral, bad, total, procentage }) {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive rate procentage {procentage}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nTotalCount.propTypes = {\r\n  title: PropTypes.string,\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  procentage: PropTypes.number,\r\n};\r\n\r\nexport default TotalCount;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Message({ message }) {\r\n  return (\r\n    <div>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nMessage.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Message;\r\n","import { Component } from 'react';\r\nimport FeedbackCounter from './FeedbackCounter';\r\nimport TotalCount from './TotalCount';\r\nimport Message from './Message';\r\n\r\nclass Feedback extends Component {\r\n  static defaultProps = {\r\n    message: 'No feedback given',\r\n  };\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  total = 0;\r\n  positiveFeedback = 0;\r\n  notifications = false;\r\n\r\n  countTotalSumOfRate = () => {\r\n    this.setState(prevState => ({\r\n      total: prevState.good + prevState.neutral + prevState.bad,\r\n    }));\r\n  };\r\n\r\n  countProcentageOfGoodRate = () => {\r\n    this.setState(prevState => ({\r\n      positiveFeedback: Math.round((prevState.good / prevState.total) * 100),\r\n    }));\r\n  };\r\n\r\n  addRateFeedback = event => {\r\n    this.setState(prevState => {\r\n      return {\r\n        [event.target.name]: Number(prevState[event.target.name] + 1),\r\n        notifications: true,\r\n      };\r\n    });\r\n    this.countTotalSumOfRate();\r\n    this.countProcentageOfGoodRate();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FeedbackCounter\r\n          title=\"Please leave feedback\"\r\n          addRate={this.addRateFeedback}\r\n        />\r\n        {this.state.notifications ? (\r\n          <TotalCount\r\n            title=\"Statistic\"\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.neutral}\r\n            total={this.state.total}\r\n            procentage={this.state.positiveFeedback}\r\n          />\r\n        ) : (\r\n          <Message message={this.message} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Feedback from './Feedback/Feedback';\n\nfunction App() {\n  return <Feedback />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}